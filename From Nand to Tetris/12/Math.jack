// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0]  = 1;
        let twoToThe[1]  = 2;
        let twoToThe[2]  = 4;
        let twoToThe[3]  = 8;
        let twoToThe[4]  = 16;
        let twoToThe[5]  = 32;
        let twoToThe[6]  = 64;
        let twoToThe[7]  = 128;
        let twoToThe[8]  = 256;
        let twoToThe[9]  = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -32767 - 1;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (-x);
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int product, shiftedX, w;

        let product = 0;
        let shiftedX = x;
        let w = 0;

        while (w < 16) {
            if (Math.bit(y, w)) {
                let product = product + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let w = w + 1;
        }

        return product;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean isResultNegative;
        var int q, result;

        let isResultNegative = (x < 0) | (y < 0);
        let x = Math.abs(x);
        let y = Math.abs(y);

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let q = Math.divide(x, y + y);

        if ((x - ((q + q) * y)) < y) {
            let result = q + q;
        }
        else {
            let result = q + q + 1;
        }

        if (isResultNegative) {
            return (-result);
        }
        
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, comp, compSquared;

        let y = 0;
        let j = 15;

        if (~(x > 0)) {
            return 0;
        }

        while (~(j < 0)) {
            let comp = y + twoToThe[j];
            let compSquared = comp * comp;
            if ((~(compSquared > x)) & (compSquared > 0)) {
                let y = comp;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /****************************************
     * API ENDS HERE. HELPER FUNCTIONS BELOW.
     ****************************************/
    
    /** Returns true if the i'th bit of x is 1. False otherwise. */
    function boolean bit(int x, int i) {
        var int power, sum;

        if (x < 0) {
            let power = 15;
        }
        else {
            let power = 14;
        }
        let sum = 0;
        //let i = i & 15;

        while (~(power < 0)) {
            if (~((sum + twoToThe[power]) > x)) {
                if (power = i) {
                    return true;
                }
                let sum = sum + twoToThe[power];
            }
            else {
                if (power = i) {
                    return false;
                }
            }
            let power = power - 1;
        }

        return false;
    }
}
